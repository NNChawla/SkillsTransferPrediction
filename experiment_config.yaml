nan_policy:
  - impute
  #- drop

train_policy:
  - A
  # - B

segment_policy:
  - full

sample_rates:
  - null

metadata_fields:
  - Gender
  - A_Build_Time
  - Hand
  # - B_Build_Time

# Define global features individually
# features: [feature_name] or [feature_name1, feature_name2, ...]
# statistics: [minx, max, median, mean, std]
# transform: none, log, sqrt, boxcox, yeojohnson
global_features:
  Head_euler_x:
   features: [Head_euler_x]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_euler_y:
   features: [Head_euler_y]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_euler_z:
   features: [Head_euler_z]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_euler_x:
   features: [LeftHand_euler_x]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_euler_y:
   features: [LeftHand_euler_y]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_euler_z:
   features: [LeftHand_euler_z]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_euler_x:
   features: [RightHand_euler_x]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_euler_y:
   features: [RightHand_euler_y]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_euler_z:
   features: [RightHand_euler_z]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_position_x:
   features: [Head_position_x]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_position_y:
   features: [Head_position_y]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_position_z:
   features: [Head_position_z]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_position_x:
   features: [LeftHand_position_x]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_position_y:
   features: [LeftHand_position_y]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_position_z:
   features: [LeftHand_position_z]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_position_x:
   features: [RightHand_position_x]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_position_y:
   features: [RightHand_position_y]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_position_z:
   features: [RightHand_position_z]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_velocity_x:
   features: [Head_velocity_x]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_velocity_y:
   features: [Head_velocity_y]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_velocity_z:
   features: [Head_velocity_z]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_velocity_x:
   features: [LeftHand_velocity_x]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_velocity_y:
   features: [LeftHand_velocity_y]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_velocity_z:
   features: [LeftHand_velocity_z]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_velocity_x:
   features: [RightHand_velocity_x]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_velocity_y:
   features: [RightHand_velocity_y]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_velocity_z:
   features: [RightHand_velocity_z]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_angular_velocity_x:
   features: [Head_angular_velocity_x]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_angular_velocity_y:
   features: [Head_angular_velocity_y]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_angular_velocity_z:
   features: [Head_angular_velocity_z]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_angular_velocity_x:
   features: [LeftHand_angular_velocity_x]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_angular_velocity_y:
   features: [LeftHand_angular_velocity_y]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_angular_velocity_z:
   features: [LeftHand_angular_velocity_z]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_angular_velocity_x:
   features: [RightHand_angular_velocity_x]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_angular_velocity_y:
   features: [RightHand_angular_velocity_y]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_angular_velocity_z:
   features: [RightHand_angular_velocity_z]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_angular_acceleration_x:
   features: [Head_angular_acceleration_x]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_angular_acceleration_y:
   features: [Head_angular_acceleration_y]
   statistics: [median, mean, min, max, std]
   transform: none
  Head_angular_acceleration_z:
   features: [Head_angular_acceleration_z]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_angular_acceleration_x:
   features: [LeftHand_angular_acceleration_x]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_angular_acceleration_y:
   features: [LeftHand_angular_acceleration_y]
   statistics: [median, mean, min, max, std]
   transform: none
  LeftHand_angular_acceleration_z:
   features: [LeftHand_angular_acceleration_z]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_angular_acceleration_x:
   features: [RightHand_angular_acceleration_x]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_angular_acceleration_y:
   features: [RightHand_angular_acceleration_y]
   statistics: [median, mean, min, max, std]
   transform: none
  RightHand_angular_acceleration_z:
   features: [RightHand_angular_acceleration_z]
   statistics: [median, mean, min, max, std]
   transform: none

model:
  type: 'knn'  # 'knn', 'random_forest', 'svm', 'linear_svm', 'tabpfn', 'logistic', 'lightgbm', or 'mlp'
  use_pca: false
  #pca_components: 3
  use_spca: false
  #spca_components: 10
  #spca_threshold: 0.14
  use_resampling: true
  resampling_strategy: 'smote_tomek'  # Options: 'smote_tomek', 'none'

  # Parameter grids for nested CV
  param_grids:
    knn:
      n_neighbors: [3, 5, 7, 9]
      weights: ['uniform', 'distance']
      metric: ['euclidean', 'manhattan']
    
    random_forest:
      n_estimators: [50, 100, 200]
      max_depth: [null, 10, 20]
      min_samples_split: [2, 5, 10]
      min_samples_leaf: [1, 2, 4]
    
    lightgbm:
      n_estimators: [50, 100, 200]
      max_depth: [-1, 5, 10]
      num_leaves: [31, 50, 100]
      learning_rate: [0.01, 0.1]
    
    svm:
      C: [0.1, 1, 10]
      kernel: ['linear', 'rbf', 'poly']
      gamma: ['scale', 'auto']
    
    mlp:
      hidden_layer_sizes: [[50], [100], [50, 25], [100, 50]]
      activation: ['relu', 'tanh']
      learning_rate_init: [0.001, 0.01]
      max_iter: [1000]

  # Base model parameters (for non-nested CV experiments)
  model_params:
    knn:
      n_neighbors: 5
      weights: 'uniform'
      n_jobs: 1
    
    random_forest:
      n_estimators: 100
      n_jobs: 1
    
    svm:
      kernel: 'poly'
      probability: true
    
    lightgbm:
      n_estimators: 100
      n_jobs: 1
      verbosity: -1

# Specify which combination sizes to generate
# For example, this will only generate pairs and triplets
# combination_sizes: [12]

# Specify features that must be included in all combinations
# required_global_features:
#   - LeftHand_velocity_y_mean
#   - LeftHand_velocity_y_std
#   - LeftHand_position_y_median
#   - LeftHand_euler_x_median # testing
#   - RightHand_velocity_z_min
#   - RightHand_euler_x_max
#   # - RightHand_velocity_x_max # Lo Zero err
#   - Head_euler_z_median
#   - Head_euler_y_min # Lo NonZero err
#   - Head_angular_acceleration_x_mean

# required_metadata_fields:
#   - Gender
#   - A_Build_Time